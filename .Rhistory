b <- sum(sorteio > 70)
b
sorteio <- sample(1:100, 40, replace=TRUE)
sorteio
#(a) Quantas bolas pares foram sorteadas?
a <- sum(sorteio%%2 == 0)
#(b) Quantas bolas maiores do que 70 foram sorteadas?
b <- sum(sorteio > 70)
b
sorteio <- sample(1:100, 40, replace=TRUE)
sorteio
#(a) Quantas bolas pares foram sorteadas?
a <- sum(sorteio%%2 == 0)
#(b) Quantas bolas maiores do que 70 foram sorteadas?
b <- sum(sorteio > 70)
b
c <- which(sorteio %% 2 != 0)
c
sorteio
n <- n + 1
sorteio_4 <- function(){
n <- 0
q <- 0
while(q < 2){
q <- q + (sample(1:6,1) == 4)
n <- n + 1
}
}
sorteio_4 <- function(){
n <- 0
q <- 0
while(q < 2){
s <- sample(1:6,1)
print(s)
q <- q + ( s == 4)
n <- n + 1
}
}
sorteio_4 <- function(){
n <- 0
q <- 0
while(q < 2){
s <- sample(1:6,1)
print(s)
q <- q + ( s == 4)
n <- n + 1
}
return(n)
}
sorteio_4()
sorteio_4 <- function(){
n <- 0
q <- 0
while(q < 2){
q <- q + ( sample(1:6,1) == 4)
n <- n + 1
}
return(n)
}
quantidades <- vector()
for(i in 1:10000){
quantidades[i] <- sorteio_4()
}
mean(quantidades)
fibonacci <- function(n){
p1 <- p2 <- 1
print(p1)
}
fibonacci()
print(p2)
fibonacci <- function(n){
p1 <- p2 <- 1
print(p2)
}
fibonacci()
fibonacci <- function(n){
p1 <- p2 <- 1
for(i in 3:n){
auxi <- p1
p1 <- p1 + p2
p2 <- aux
print(p1)
}
}
fibonacci(3)
fibonacci <- function(n){
p1 <- p2 <- 1
for(i in 3:n){
auxi <- p1
p1 <- p1 + p2
p2 <- auxi
print(p1)
}
}
fibonacci(3)
fibonacci <- function(n){
p1 <- p2 <- 1
print(p1)
print(p2)
for(i in 3:n){
auxi <- p1
p1 <- p1 + p2
p2 <- auxi
print(p1)
}
}
fibonacci(3)
fibonacci <- function(n){
sequencia <- vector(1,1)
for(i in 3:n){
seq[i] <- seq[i-2] + seq[i-1]
}
return(sequencia)
}
fibonacci(3)
fibonacci <- function(n){
sequencia <- c(1,1)
for(i in 3:n){
seq[i] <- seq[i-2] + seq[i-1]
}
return(sequencia)
}
fibonacci(3)
fibonacci <- function(n){
sequencia <- c(1,1)
for(i in 3:n){
seq[i] <- sequencia[i-2] + sequencia[i-1]
}
return(sequencia)
}
fibonacci(3)
sequencia[i] <- sequencia[i-2] + sequencia[i-1]
fibonacci <- function(n){
sequencia <- c(1,1)
for(i in 3:n){
sequencia[i] <- sequencia[i-2] + sequencia[i-1]
}
return(sequencia)
}
fibonacci(3)
fibonacci(7)
fibonacci(10)
participantes <- c("Michael Scott", "Dwight Schrute", "Jim Halpert",
"Kevin Malone", "Creed Bratton")
sorteio <- sample(participantes, len(participantes))
participantes <- c("Michael Scott", "Dwight Schrute", "Jim Halpert",
"Kevin Malone", "Creed Bratton")
sorteio <- sample(participantes, length(participantes))
participantes
sorteio
10**5
n <- 10**5
b
n
n <- 10**5/100000
n
sucesso <- 0
participantes <- c("Michael Scott", "Dwight Schrute", "Jim Halpert",
"Kevin Malone", "Creed Bratton")
n <- 10**5
sucesso <- 0
print(participantes)
for(i in 1:n){
sorteio <- sample(participantes, length(participantes))
if (sum(participantes != sorteio) == length(participantes)){
print(sorteio)
}
}
participantes <- c("A", "B", "C", "D", "E")
print(participantes)
for(i in 1:10){
sorteio <- sample(participantes, length(participantes))
if (sum(participantes != sorteio) == length(participantes)){
print(sorteio)
}
}
print(participantes)
print(sucesso)
for(i in 1:10){
sorteio <- sample(participantes, length(participantes))
if (sum(participantes != sorteio) == length(participantes)){
sucesso <- sucesso + 1
}
}
print(sucesso)
for(i in 1:100){
sorteio <- sample(participantes, length(participantes))
if (sum(participantes != sorteio) == length(participantes)){
sucesso <- sucesso + 1
}
}
print(sucesso)
for(i in 1:1000){
sorteio <- sample(participantes, length(participantes))
if (sum(participantes != sorteio) == length(participantes)){
sucesso <- sucesso + 1
}
}
print(sucesso)
for(i in 1:10000){
sorteio <- sample(participantes, length(participantes))
if (sum(participantes != sorteio) == length(participantes)){
sucesso <- sucesso + 1
}
}
print(sucesso)
for(i in 1:100000){
sorteio <- sample(participantes, length(participantes))
if (sum(participantes != sorteio) == length(participantes)){
sucesso <- sucesso + 1
}
}
print(sucesso)
?sum
for(i in 1:100000){
sorteio <- sample(participantes, length(participantes))
sucesso <- sucesso + prod(participantes != sorteio)
}
sucesso
for(i in 1:100000){
sorteio <- sample(participantes, length(participantes))
if (sum(participantes != sorteio) == length(participantes)){
sucesso <- sucesso + 1
}
sucesso2 <- sucesso2 + prod(participantes != sorteio)
}
sucesso2 <- 0
for(i in 1:100000){
sorteio <- sample(participantes, length(participantes))
if (sum(participantes != sorteio) == length(participantes)){
sucesso <- sucesso + 1
}
sucesso2 <- sucesso2 + prod(participantes != sorteio)
}
sucesso
sucesso2
prod(participantes != sorteio)
n <- 10**5
sucesso <- 0
sucesso2 <- 0
for(i in 1:100000){
sorteio <- sample(participantes, length(participantes))
if (sum(participantes != sorteio) == length(participantes)){
sucesso <- sucesso + 1
}
sucesso2 <- sucesso2 + prod(participantes != sorteio)
}
sucesso
sucesso2
?sum
participantes <- c("Michael Scott", "Dwight Schrute", "Jim Halpert",
"Kevin Malone", "Creed Bratton")
n <- 10**5
sucesso <- 0
for(i in 1:n){
sorteio <- sample(participantes, length(participantes))
sucesso <- sucesso + prod(participantes != sorteio)
}
sucesso/n
participantes <- c("Michael Scott", "Dwight Schrute", "Jim Halpert",
"Kevin Malone", "Creed Bratton")
n <- 10**5
sucesso <- 0
for(i in 1:n){
sorteio <- sample(participantes, length(participantes))
sucesso <- sucesso + prod(participantes != sorteio)
}
sucesso/n
participantes <- c("Michael Scott", "Dwight Schrute", "Jim Halpert",
"Kevin Malone", "Creed Bratton")
n <- 10**5
sucesso <- 0
for(i in 1:n){
sorteio <- sample(participantes, length(participantes))
sucesso <- sucesso + prod(participantes != sorteio)
}
sucesso/n
participantes <- c("Michael Scott", "Dwight Schrute", "Jim Halpert",
"Kevin Malone", "Creed Bratton")
n <- 10**5
sucesso <- 0
for(i in 1:n){
sorteio <- sample(participantes, length(participantes))
sucesso <- sucesso + prod(participantes != sorteio)
}
sucesso/n
prop_fracasso <- 1 - sucesso/n
prop_fracasso <- 1 - sucesso/n
prop_fracasso
participantes <- c("Michael Scott", "Dwight Schrute", "Jim Halpert",
"Kevin Malone", "Creed Bratton")
n <- 10**5
sucesso <- 0
for(i in 1:n){
sorteio <- sample(participantes, length(participantes))
sucesso <- sucesso + prod(participantes != sorteio)
}
prop_fracasso <- 1 - sucesso/n
prop_fracasso
N <- 20
retorno <- function(L){
#Considere 1 como cara e -1 como coroa
posicacao <- L
while(posicacao > 0 & posicacao < N){
posicacao <- posicacao + sample(c(-1,1),size=1,replace=TRUE)
}print(posicacao/N)
print(posicacao/N)
retorno <- function(L){
#Considere 1 como cara e -1 como coroa
posicacao <- L
while(posicacao > 0 & posicacao < N){
posicacao <- posicacao + sample(c(-1,1),size=1,replace=TRUE)
}
print(posicacao/N)
}
retorno(0)
retorno(1)
retorno(100)
N <- 20
retorno <- function(L){
#Considere 1 como cara e -1 como coroa
posicacao <- L
while(posicacao > 0 & posicacao < N){
posicacao <- posicacao + sample(c(-1,1),size=1,replace=TRUE)
}
print(posicacao)
}
retorno(100)
retorno <- function(L){
#Considere 1 como cara e -1 como coroa
posicacao <- L
while(posicacao > 0 | posicacao < N){
posicacao <- posicacao + sample(c(-1,1),size=1,replace=TRUE)
}
print(posicacao)
}
retorno(100)
retorno(10)
N <- 20
retorno <- function(L){
#Considere 1 como cara e -1 como coroa
posicacao <- L
while(posicacao > 0 & posicacao < N){
posicacao <- posicacao + sample(c(-1,1),size=1,replace=TRUE)
print(posicacao)
}
}
retorno(10)
retorno(10)
N <- 20
retorno <- function(L){
#Considere 1 como cara e -1 como coroa
posicacao <- L
while(posicacao > 0 & posicacao < N){
posicacao <- posicacao + sample(c(-1,1),size=1,replace=TRUE)
}
return(posicacao/N)
}
retorno(10)
retorno(10)
retorno(10)
retorno(10)
retorno(10)
retorno(10)
retorno(10)
retorno(15)
retorno(15)
retorno(15)
retorno(15)
retorno(15)
retorno(15)
retorno(15)
retorno(15)
retorno(15)
retornos <- function(L){
sucessos <- vector()
for(i in 1:10000){
sucessos[i] <- retorno(L)
}
return(mean(sucessos))
}
retornos(19)
retornos(1)
retornos(10)
retorno <- function(L){
N <- 20
posicacao <- L
while(posicacao > 0 & posicacao < N){
posicacao <- posicacao + sample(c(-1,1),size=1,replace=TRUE)
}
return(posicacao/N)
}
retornos <- function(L){
sucessos <- vector()
for(i in 1:10000){
sucessos[i] <- retorno(L)
}
return(mean(sucessos))
}
retornos(15)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
#install.packages("ggplot2")
library(ggplot2)
valor_l <- vector()
for(i in 1:19){
valor_l[i] <- retornos(i)
}
retorno <- function(L){
N <- 20
posicacao <- L
while(posicacao > 0 & posicacao < N){
posicacao <- posicacao + sample(c(-1,1),size=1,replace=TRUE)
}
if(posicacao == N){
return(1)
}
return(0)
}
retornos <- function(L){
sucessos <- vector()
for(i in 1:10000){
sucessos[i] <- retorno(L)
}
return(mean(sucessos))
}
retornos(15)
retornos(5)
for(i in 1:19){
valor_l[i] <- retornos(i)
}
#install.packages("ggplot2")
library(ggplot2)
valor_l <- vector()
for(i in 1:4){
valor_l[i] <- retornos(i)
}
ggplot(valor_l, aes(x=1:4, y=valor_l))
#install.packages("ggplot2")
library(ggplot2)
valor_l <- vector()
for(i in 1:4){
valor_l[i] <- retornos(i)
}
grafo <- data.frame(
L_val <- valor_l,
indere <- 1:4
)
names(grafo)
ggplot(grafo, aes(x=grafo$indere....1.4, y=grafo$L_val....valor_l))
ggplot(grafo, aes(x=grafo$indere....1.4, y=grafo$L_val....valor_l))+
geom_bar()
ggplot(grafo, aes(x=$indere....1.4, y=$L_val....valor_l))+
ggplot(grafo, aes(x=indere....1.4, y=L_val....valor_l))+
geom_bar()
table(valor_l,1:4)
table(c(valor_l,1:4))
table(1:4,valor_l)
table(valor_l)
#Funcao sample
dado <- sample(x = 1:6, size = 1000000, replace = TRUE)
deu_1 <- dado == 1
sum(deu_1)
mean(deu_1)
#Soma de dois dados, e probabilidade de sair 7
set.seed(2133)
d1 <- sample(x = 1:6, size = 1000000, replace = TRUE)
d2 <- sample(x = 1:6, size = 1000000, replace = TRUE)
soma = d1 + d2
mean(soma)
soma_7 <- soma == 7
sum(soma_7)
mean(soma_7)
#Criacao de tabelas e graficos
tabela_soma <- table(soma)
barplot(tabela_soma)
d1 <- sample(x = 1:6, size = 1000000, replace = TRUE)
d2 <- sample(x = 1:6, size = 1000000, replace = TRUE)
soma = d1 + d2
mean(soma)
soma_7 <- soma == 7
sum(soma_7)
mean(soma_7)
soma
#Criacao de tabelas e graficos
tabela_soma <- table(soma)
barplot(tabela_soma)
barplot(valor_l~1:4)
df <- data.frame(L<-1:4, prop<-valor_l)
ggplot(df, aes(x=L, y=prop))+
geom_bar()
#install.packages("ggplot2")
library(ggplot2)
valor_l <- vector()
for(i in 1:4){
valor_l[i] <- retornos(i)
}
df <- data.frame(L<-1:4, prop<-valor_l)
ggplot(df, aes(x=L, y=prop))+
geom_bar()
ggplot(df, aes(x=L, y=prop))+
geom_point()
alcance <- 1:19
valor_l <- vector()
alcance <- 1:19
for(i in alcance){
valor_l[i] <- retornos(i)
}
df <- data.frame(L<-alcance, prop<-valor_l)
ggplot(df, aes(x=L, y=prop))+
geom_point()
