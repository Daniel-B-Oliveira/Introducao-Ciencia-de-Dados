for(i in 1:10000){
quantidades[i] <- sorteio_4()
}
mean(quantidades)
#Interpreta√ß√£o, seja X: a lancamento de um dado at√© que caia 4 pela segunda vez.
#X~binomialNegativa(n=2, p=1/6), logo, E[X]=n*1/p = 2*6 = 12. Pela lei dos
#grandes n√∫meros e pelo fato da media de X ser E[X], a media do vetor quantidades
#tende a 12.
#Exerc√≠cio 7. Os dois primeiros termos da sequ√™ncia de Fibonacci s√£o iguais a 1.
#Os termos subsequentes da sequ√™ncia s√£o encontrados somando os dois termos
#imediatamente anteriores. Escreva uma fun√ß√£o com par√¢metro de entrada n chamada
#fibonacci que retornar√° os primeiros n termos da sequ√™ncia de Fibonacci para
#qualquer ùëõ ‚â• 3.
fibonacci <- function(n){
sequencia <- c(1,1)
for(i in 3:n){
sequencia[i] <- sequencia[i-2] + sequencia[i-1]
}
return(sequencia)
}
#Exerc√≠cio 8. Michael Scott √© gerente regional da empresa Dunder Mufflin. Para
#as festividades de fim de ano, Michael prop√¥s aos funcion√°rios Dwight Schrute,
#Jim Halpert, Kevin Malone e Creed Bratton a realiza√ß√£o de um amigo oculto entre
#eles. Consideraremos que o sorteio do amigo oculto deu errado quando uma pessoa
#sortear ela mesma (Michael tira Michael, por exemplo). Simule o sorteio do
#amigo oculto. Se ele deu certo, atribua o valor 1; caso contr√°rio, atribua o
#valor 0 (zero). Em seguida, replique este experimento cem mil vezes e calcule a
#propor√ß√£o de vezes que o amigo oculto deu errado
participantes <- c("Michael Scott", "Dwight Schrute", "Jim Halpert",
"Kevin Malone", "Creed Bratton")
n <- 10**5
sucesso <- 0
for(i in 1:n){
sorteio <- sample(participantes, length(participantes))
sucesso <- sucesso + prod(participantes != sorteio)
}
prop_fracasso <- 1 - sucesso/n
prop_fracasso
#Exerc√≠cio 9. Luke Skywalker realizar√° o seguinte passeio aleat√≥rio na reta: a
#reta do passeio √© formada pelos n√∫meros inteiros de zero at√© ùëÅ; Luke est√° em
#um ponto ùêø que √© maior do que zero e menor do que ùëÅ;Luke lan√ßa uma moeda
#honesta; se sair coroa, ele d√° um passo para a esquerda (e termina na posi√ß√£o
#ùêø ‚àí 1 da reta); se sair cara, ele d√° um passo para a direita (e termina na
#posi√ß√£o ùêø + 1 da reta). Luke continuar√° a lan√ßar a moeda e se deslocar√° at√©
#que ele chegue em sua casa (e l√° ele vai dormir e o passeio acaba) ou at√© que
#ele chegue (caia) no precip√≠cio (e, √≥bvio, o passeio tamb√©m acaba nesse caso).
#(a) Para ùëÅ = 20, crie uma fun√ß√£o cuja entrada seja ùêø (um n√∫mero maior do que
#zero e menor do que 20) e que retorne 1 se Luke terminou um passeio em sua casa
#ou retorne zero se Luke caiu no precip√≠cio.
retorno <- function(L){
N <- 20
posicacao <- L
while(posicacao > 0 & posicacao < N){
posicacao <- posicacao + sample(c(-1,1),size=1,replace=TRUE)
}
if(posicacao == N){
return(1)
}
return(0)
}
#(b) Crie uma fun√ß√£o cuja entrada seja ùêø; esta fun√ß√£o dever√° replicar o passeio
#da letra (a) 10 mil vezes e retornar a propor√ß√£o de vezes que Luke chegou em
#sua casa. Sugest√£o: crie um vetor que, para cada replica√ß√£o, guardar√° o
#resultado de um passeio; cada entrada deste vetor ser√° zero ou 1; zero se Luke
#caiu no precip√≠cio e 1 se Luke chegou em casa.
retornos <- function(L){
sucessos <- vector()
for(i in 1:10000){
sucessos[i] <- retorno(L)
}
return(mean(sucessos))
}
#(c) Use a fun√ß√£o criada em (b) para ùêø = 1, 2, ‚Ä¶ , 19 e, em seguida, use esses
#valores para plotar um gr√°fico de ùë• = 1 ‚à∂ 19 por ùë¶, em que ùë¶ s√£o a
# propor√ß√µes retornadas pela fun√ß√£o criada em (b) para cada ùë•.
library(ggplot2)
valor_retorno <- vector()
valor_L <- 1:19
for(i in valor_L){
valor_retorno[i] <- retornos(i)
}
df <- data.frame(L<-valor_L, prop<-valor_retorno)
ggplot(df, aes(x=L, y=prop))+
geom_point()
#Exerc√≠cio 10. Harold Frederick Shipman (Nottingham, 14 de janeiro de 1946 ‚Äî
#Wakefield, 13 de janeiro de 2004), conhecido como ‚ÄúDoutor Morte‚Äù, foi um m√©dico
#e assassino em s√©rie brit√¢nico condenado pela morte de muitos pacientes entre as
# d√©cadas de 1970 e 1990. Dr. Shipman √©, talvez, o assassino em s√©rie mais
# prol√≠fico da Hist√≥ria Moderna. O arquivo dados.txt cont√©m informa√ß√µes sobre o
# sexo, a idade, o local da morte (casa do paciente; hospital; casa de repouso)
# e o ano da morte das v√≠timas de Shipman. Antes de responder as quest√µes abaixo,
# abra o arquivo dados.txt e compreenda sua estrutura. Importe o arquivo para o
# R e utilize-o para responder os seguintes itens.
dados <- read.table("dados.txt", sep=";", header=TRUE)
str(dados)
dados$LocalDaMorte <- as.factor(dados$LocalDaMorte)
dados$Genero <- as.factor(dados$Genero)
summary(dados)
#(a) Escolha um gr√°fico apropriado para representar as frequ√™ncias das
#categorias da vari√°vel sexo. Comente os resultados encontrados.
ggplot(dados, mapping=aes(Genero))+
geom_bar()+
theme_minimal()
#(b) Apresente o histograma da vari√°vel idade em 8 (argumento bins na geometria
#do histograma) intervalos. Comente os resultados obtidos. Analise este gr√°fico
#para cada g√™nero.
ggplot(dados, aes(x=Idade))+
geom_histogram(bins = 8)+
theme_minimal()+
facet_wrap(~Genero)
#(c) Apresente o boxplot da vari√°vel idade. Comente os resultados obtidos.
ggplot(dados, aes(y=Idade))+
geom_boxplot()+
theme_minimal()
#(d) Apresente um gr√°fico para representar o local da morte. Comente os
#resultados obtidos.
ggplot(dados, aes(x=LocalDaMorte))+
geom_bar()+
theme_minimal()
#(e) Analise graficamente o ano da morte das v√≠timas de Harold Shipman.
ggplot(dados, aes(AnoDaMorte))+
geom_histogram(bins=10)+
theme_minimal()
#Exerc√≠cio 11. O conjunto primatas.txt apresenta informa√ß√µes sobre tamanho
# (cent√≠metros), peso (libras) e g√™nero de bonobos e de chimpanz√©s. Abra o
# arquivo e veja como ele est√° organizado.
primatas <- read.table("primatas.txt", sep=":", header=TRUE)
str(primatas)
primatas$especie <- as.factor(primatas$especie)
primatas$genero <- as.factor(primatas$genero)
#(a) Importe o arquivo para o ambiente do R. Conhe√ßa sua estrutura e pe√ßa um
#resumo dos dados com alguma fun√ß√£o. (1 ponto)
summary(primatas)
#(b) Construa um gr√°fico de barras contando quantas esp√©cies de bonobos e
#chimpanz√©s h√° no conjunto. Construa tamb√©m um gr√°fico de barras mostrando a
#frequ√™ncia de machos e f√™meas de cada esp√©cie. (4 pontos)
ggplot(primatas, aes(x=especie))+
geom_bar()
ggplot(primatas, aes(x=genero))+
geom_bar()+
facet_wrap(~especie)
#Construa um gr√°fico para comparar as f√™meas e os machos dos bonobos.
#Em seguida, construa, tamb√©m, um gr√°fico para comparar as f√™meas e os machos
#dos chimpanz√©s. (4 pontos)
library(dplyr)
summary(primatas)
primatas |>
filter(primatas$especie == "bonobo") |>
ggplot(aes(altura, peso, col=genero))+
geom_point()+
geom_hline(yintercept=38.5)
theme_minimal()
primatas |>
filter(primatas$especie == "chimpanze") |>
ggplot(aes(altura, peso,col=genero))+
geom_point()+
geom_vline(xintercept=129)
theme_minimal()
#(d) Construa um gr√°fico para comparar as f√™meas dos bonobos e dos chimpanz√©s.
#Em seguida, construa tamb√©m um gr√°fico para comparar os machos dos bonobos e
#dos chimpanz√©s. (4 pontos)
primatas |>
filter(primatas$genero == "femea") |>
ggplot(aes(altura, peso, col=especie))+
geom_point()+
geom_hline(yintercept = 37.45)
theme_minimal()
primatas |>
filter(primatas$genero == "macho") |>
ggplot(aes(altura, peso, col=especie))+
geom_point()+
geom_hline(yintercept=52.7)
theme_minimal()
#(e) A partir das an√°lises dos itens anteriores, escreva um pequeno texto
#contendo informa√ß√µes sobre os bonobos e os chimpanz√©s, como exemplo: diferen√ßas
#entre os g√™neros de cada esp√©cie e diferen√ßas entre as esp√©cies. (5 pontos)
#(f) A partir das vari√°veis tamanho, peso e genero, construa um modelo de √°rvore
#de decis√£o utilizando estruturas condicionais que seja capaz de prever a
#esp√©cie de uma observa√ß√£o. Calcule a acur√°cia do modelo. (10 pontos)
previsao_especie <- vector()
for(i in 1:nrow(primatas)){
if(primatas$genero[i] == "femea"){
if(primatas$peso[i] > 37.45){
previsao_especie[i] <- "chimpanze"
}
else{
previsao_especie[i] <- "bonobo"
}
}else{
if(primatas$peso[i] > 52.7){
previsao_especie[i] <- "chimpanze"
}else{
previsao_especie[i] <- "bonobo"
}
}
}
previsao_especie <- as.factor(previsao_especie)
mean(previsao_especie == primatas$especie)
install.packages("rpart")
install.packages("rpart.plot")
rpart
library(rpart)
library(rpart.plot)
arvore_macacos <- rpart(especie~., treino, "class")
primatas <- read.table("primatas.txt", sep=":", header=TRUE)
str(primatas)
primatas$especie <- as.factor(primatas$especie)
primatas$genero <- as.factor(primatas$genero)
summary(primatas)
#(b) Construa um gr√°fico de barras contando quantas esp√©cies de bonobos e
#chimpanz√©s h√° no conjunto. Construa tamb√©m um gr√°fico de barras mostrando a
#frequ√™ncia de machos e f√™meas de cada esp√©cie. (4 pontos)
ggplot(primatas, aes(x=especie))+
geom_bar()
library(ggplot2)
primatas <- read.table("primatas.txt", sep=":", header=TRUE)
str(primatas)
primatas$especie <- as.factor(primatas$especie)
primatas$genero <- as.factor(primatas$genero)
summary(primatas)
#(b) Construa um gr√°fico de barras contando quantas esp√©cies de bonobos e
#chimpanz√©s h√° no conjunto. Construa tamb√©m um gr√°fico de barras mostrando a
#frequ√™ncia de machos e f√™meas de cada esp√©cie. (4 pontos)
ggplot(primatas, aes(x=especie))+
geom_bar()
ggplot(primatas, aes(x=genero))+
geom_bar()+
facet_wrap(~especie)
#(c) Construa um gr√°fico para comparar as f√™meas e os machos dos bonobos.
#Em seguida, construa, tamb√©m, um gr√°fico para comparar as f√™meas e os machos
#dos chimpanz√©s. (4 pontos)
library(dplyr)
summary(primatas)
primatas |>
filter(primatas$especie == "bonobo") |>
ggplot(aes(altura, peso, col=genero))+
geom_point()+
geom_hline(yintercept=38.5)+
labs(title = "Macacos da esp√©cie bonobo")+
theme_minimal()
primatas |>
filter(primatas$especie == "chimpanze") |>
ggplot(aes(altura, peso,col=genero))+
geom_point()+
geom_vline(xintercept=129)+
labs(title= "Macacos da esp√©cie chimpanze")
theme_minimal()
#(d) Construa um gr√°fico para comparar as f√™meas dos bonobos e dos chimpanz√©s.
#Em seguida, construa tamb√©m um gr√°fico para comparar os machos dos bonobos e
#dos chimpanz√©s. (4 pontos)
primatas |>
filter(primatas$genero == "femea") |>
ggplot(aes(altura, peso, col=especie))+
geom_point()+
labs(title= "F√™meas de bonobos e chimpanz√©s")+
theme_minimal()
primatas |>
filter(primatas$genero == "macho") |>
ggplot(aes(altura, peso, col=especie))+
geom_point()+
labs(title="Machos de bonobos e chimpanz√©s")+
theme_minimal()
#(e) A partir das an√°lises dos itens anteriores, escreva um pequeno texto
#contendo informa√ß√µes sobre os bonobos e os chimpanz√©s, como exemplo: diferen√ßas
#entre os g√™neros de cada esp√©cie e diferen√ßas entre as esp√©cies. (5 pontos)
#Nos bonobos, os machos s√£o mais pesados que as f√™meas, com pesos variando de
#38,5 a 51 kg para os machos e de 27 a 38,5 kg para as f√™meas. Quanto √† altura,
#h√° uma sobreposi√ß√£o entre os sexos: os machos medem entre 127 e 136 cm,
#enquanto as f√™meas ficam entre 120 e 130 cm. J√° nos chimpanz√©s, n√£o h√°
#sobreposi√ß√£o nem nos pesos nem nas alturas, com os machos sendo mais pesados e
#mais altos. Os pesos dos machos variam de 50 a 65 kg e os das f√™meas de 36 a
#48 kg; em altura, os machos medem entre 130 e 138 cm e as f√™meas entre 120 e
#138 cm. Comparando as duas esp√©cies, percebe-se que os chimpanz√©s, tanto machos
#quanto f√™meas, tendem a ser mais pesados que os bonobos, embora as alturas
#possam se sobrepor entre f√™meas e machos de ambas as esp√©cies.
#(f) A partir das vari√°veis tamanho, peso e genero, construa um modelo de √°rvore
#de decis√£o utilizando estruturas condicionais que seja capaz de prever a
#esp√©cie de uma observa√ß√£o. Calcule a acur√°cia do modelo. (10 pontos)
n <- round(nrow(primatas)*0.8)
id_treino <- sample(1:nrow(primatas),n,FALSE)
treino <- primatas[id_treino,]
teste <- primatas[-id_treino,]
treino |>
filter(treino$genero == "femea")|>
ggplot(aes(altura, peso, col=especie))+
geom_hline(yintercept = 37.45)+
geom_point()
treino |>
filter(treino$genero != "femea")|>
ggplot(aes(altura, peso, col=especie))+
geom_hline(yintercept=52.7)+
geom_point()
previsao <- vector()
for(i in 1:nrow(teste)){
if(teste$genero[i] == 'femea'){
if(teste$peso[i] > 37.45){
previsao[i] <- "chimpanze"
}else{
previsao[i] <- "bonobo"
}
}else{
if(teste$peso[i] > 52.7){
previsao[i] <- "chimpanze"
}else{
previsao[i] <- "bonobo"
}
}
}
mean(previsao == teste$especie)
#ou
library(rpart)
library(rpart.plot)
arvore_macacos <- rpart(especie~., treino, "class")
arvore_macacos <- rpart(especie~., treino, method = "class")
previsao_arvore <- predict(arvore_macacos, newdata = teste, type="class")
mean(previsao_arvore == teste$especie)
n <- round(nrow(primatas)*0.8)
id_treino <- sample(1:nrow(primatas),n,FALSE)
treino <- primatas[id_treino,]
teste <- primatas[-id_treino,]
treino |>
filter(treino$genero == "femea")|>
ggplot(aes(altura, peso, col=especie))+
geom_hline(yintercept = 37.45)+
geom_point()
treino |>
filter(treino$genero != "femea")|>
ggplot(aes(altura, peso, col=especie))+
geom_hline(yintercept=52.7)+
geom_point()
previsao <- vector()
for(i in 1:nrow(teste)){
if(teste$genero[i] == 'femea'){
if(teste$peso[i] > 37.45){
previsao[i] <- "chimpanze"
}else{
previsao[i] <- "bonobo"
}
}else{
if(teste$peso[i] > 52.7){
previsao[i] <- "chimpanze"
}else{
previsao[i] <- "bonobo"
}
}
}
mean(previsao == teste$especie)
#ou
library(rpart)
library(rpart.plot)
arvore_macacos <- rpart(especie~., treino, method = "class")
previsao_arvore <- predict(arvore_macacos, newdata = teste, type="class")
mean(previsao_arvore == teste$especie)
return(factorial(x-1)^(x-1))
x = 2
r <- factorial(x-1)^(x-1)
r
x = 3
r <- factorial(x-1)^(x-1)
r
x = 4
r <- factorial(x-1)^(x-1)
r
diagonais <- function(x){
r <- factorial(x-1)^(x-1)
return(r)
}
diagonais(4)
ggplot(n, aes(1:10, n))
library(ggplot2)
ggplot(n, aes(1:10, n))
pontos <- data.frame(
indice <- 1:10,
valor <- n
)
n <- vector()
for(i in 1:10){
n[i] <- diagonais(i)
}
pontos <- data.frame(
indice <- 1:10,
valor <- n
)
ggplot(n, aes(indice, valor))+
geom_point()
ggplot(n, aes(valor))+
geom_point()
df <- data.frame(
indice <- 1:10,
valor <- n
)
print(df)
n[2]
n[3]
n[4]
df
summary(df)
ggplot(df)
ggplot(df,aes(indice))
ggplot(df,aes(indice, valor))
ggplot(df,aes(indice, valor))+
geom_point()
df <- data.frame(
indice <- 1:10,
valor <- log10(n)
)
ggplot(df,aes(indice, valor))+
geom_point()
t <- 20
n <- vector()
for(i in 1:t){
n[i] <- diagonais(i)
}
df <- data.frame(
indice <- 1:t,
valor <- log10(n)
)
ggplot(df,aes(indice, valor))+
geom_point()
t <- 30
n <- vector()
for(i in 1:t){
n[i] <- diagonais(i)
}
df <- data.frame(
indice <- 1:t,
valor <- log10(n)
)
ggplot(df,aes(indice, valor))+
geom_point()
t <- 30
n <- vector()
for(i in 1:t){
n[i] <- diagonais(i)
}
df <- data.frame(
indice <- 1:t,
valor <- logb(n, t)
)
ggplot(df,aes(indice, valor))+
geom_point()
df <- data.frame(
indice <- 1:t,
valor <- log(n,t)
)
ggplot(df,aes(indice, valor))+
geom_point()
t <- 10
n <- vector()
for(i in 1:t){
n[i] <- diagonais(i)
}
df <- data.frame(
indice <- 1:t,
valor <- log10(n)
)
ggplot(df,aes(indice, valor))+
geom_point()
t <- 20
n <- vector()
for(i in 1:t){
n[i] <- diagonais(i)
}
df <- data.frame(
indice <- 1:t,
valor <- log10(n)
)
ggplot(df,aes(indice, valor))+
geom_point()
t <- 25
n <- vector()
for(i in 1:t){
n[i] <- diagonais(i)
}
df <- data.frame(
indice <- 1:t,
valor <- log10(n)
)
ggplot(df,aes(indice, valor))+
geom_point()
ggplot(df,aes(indice, valor))+
geom_point()+
curve(x^2)
df$nomes[i] <- sample(1:n, n)
getwd()
dados <- read.table("titanic.txt", sep=",", header = T)
dados
str(dados)
dados$sex <- as.factor(dados$Sex)
dados$Survived <- as.factor(dados$Survived)
str(dados)
library(dplyr)
library(ggplot2)
dados |>
ggplo(aes(Survived))+
geom_col()
dados |>
ggplot(aes(Survived))+
geom_col()
ggplot(dados, aes(Survived))
ggplot(dados, aes(Survived))+
geom_col()
ggplot(dados, aes(Survived))+
geom_bar()
ggplot(dados, aes(Survived, fill = sex))+
geom_bar()
dados$Pclass <- as.factor(dados$Pclass)
ggplot(dados, aes(Survived, fill = sex))+
geom_bar()+
facet_wrap(~Pclass)
ggplot(dados, aes(Survived, fill = sex))+
geom_contour()
